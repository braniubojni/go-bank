// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mockdb

import (
	"context"
	"github.com/simplebank/db/sqlc"
	"sync"
)

// Ensure, that MockStore does implement db.Store.
// If this is not the case, regenerate this file with moq.
var _ db.Store = &MockStore{}

// MockStore is a mock implementation of db.Store.
//
//	func TestSomethingThatUsesStore(t *testing.T) {
//
//		// make and configure a mocked db.Store
//		mockedStore := &MockStore{
//			AddAccountBalanceFunc: func(ctx context.Context, arg db.AddAccountBalanceParams) (db.Accounts, error) {
//				panic("mock out the AddAccountBalance method")
//			},
//			CreateAccountFunc: func(ctx context.Context, arg db.CreateAccountParams) (db.Accounts, error) {
//				panic("mock out the CreateAccount method")
//			},
//			CreateEntryFunc: func(ctx context.Context, arg db.CreateEntryParams) (db.Entries, error) {
//				panic("mock out the CreateEntry method")
//			},
//			CreateTransferFunc: func(ctx context.Context, arg db.CreateTransferParams) (db.Transfers, error) {
//				panic("mock out the CreateTransfer method")
//			},
//			CreateUserFunc: func(ctx context.Context, arg db.CreateUserParams) (db.Users, error) {
//				panic("mock out the CreateUser method")
//			},
//			DeleteAccountFunc: func(ctx context.Context, id int64) (db.Accounts, error) {
//				panic("mock out the DeleteAccount method")
//			},
//			DeleteEntryFunc: func(ctx context.Context, id int64) (db.Entries, error) {
//				panic("mock out the DeleteEntry method")
//			},
//			DeleteTransferFunc: func(ctx context.Context, id int64) (db.Transfers, error) {
//				panic("mock out the DeleteTransfer method")
//			},
//			GetAccountFunc: func(ctx context.Context, id int64) (db.Accounts, error) {
//				panic("mock out the GetAccount method")
//			},
//			GetAccountForUpdateFunc: func(ctx context.Context, id int64) (db.Accounts, error) {
//				panic("mock out the GetAccountForUpdate method")
//			},
//			GetEntryFunc: func(ctx context.Context, id int64) (db.Entries, error) {
//				panic("mock out the GetEntry method")
//			},
//			GetTransferFunc: func(ctx context.Context, id int64) (db.Transfers, error) {
//				panic("mock out the GetTransfer method")
//			},
//			GetUserFunc: func(ctx context.Context, username string) (db.Users, error) {
//				panic("mock out the GetUser method")
//			},
//			ListAccountsFunc: func(ctx context.Context, arg db.ListAccountsParams) ([]db.Accounts, error) {
//				panic("mock out the ListAccounts method")
//			},
//			ListEntriesFunc: func(ctx context.Context, arg db.ListEntriesParams) ([]db.Entries, error) {
//				panic("mock out the ListEntries method")
//			},
//			ListTransfersFunc: func(ctx context.Context, arg db.ListTransfersParams) ([]db.Transfers, error) {
//				panic("mock out the ListTransfers method")
//			},
//			TransferTxFunc: func(ctx context.Context, arg db.TransferTxParams) (db.TransferTxResult, error) {
//				panic("mock out the TransferTx method")
//			},
//			UpdateAccountFunc: func(ctx context.Context, arg db.UpdateAccountParams) (db.Accounts, error) {
//				panic("mock out the UpdateAccount method")
//			},
//			UpdateEntryFunc: func(ctx context.Context, arg db.UpdateEntryParams) (db.Entries, error) {
//				panic("mock out the UpdateEntry method")
//			},
//			UpdateTransferFunc: func(ctx context.Context, arg db.UpdateTransferParams) (db.Transfers, error) {
//				panic("mock out the UpdateTransfer method")
//			},
//		}
//
//		// use mockedStore in code that requires db.Store
//		// and then make assertions.
//
//	}
type MockStore struct {
	// AddAccountBalanceFunc mocks the AddAccountBalance method.
	AddAccountBalanceFunc func(ctx context.Context, arg db.AddAccountBalanceParams) (db.Accounts, error)

	// CreateAccountFunc mocks the CreateAccount method.
	CreateAccountFunc func(ctx context.Context, arg db.CreateAccountParams) (db.Accounts, error)

	// CreateEntryFunc mocks the CreateEntry method.
	CreateEntryFunc func(ctx context.Context, arg db.CreateEntryParams) (db.Entries, error)

	// CreateTransferFunc mocks the CreateTransfer method.
	CreateTransferFunc func(ctx context.Context, arg db.CreateTransferParams) (db.Transfers, error)

	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(ctx context.Context, arg db.CreateUserParams) (db.Users, error)

	// DeleteAccountFunc mocks the DeleteAccount method.
	DeleteAccountFunc func(ctx context.Context, id int64) (db.Accounts, error)

	// DeleteEntryFunc mocks the DeleteEntry method.
	DeleteEntryFunc func(ctx context.Context, id int64) (db.Entries, error)

	// DeleteTransferFunc mocks the DeleteTransfer method.
	DeleteTransferFunc func(ctx context.Context, id int64) (db.Transfers, error)

	// GetAccountFunc mocks the GetAccount method.
	GetAccountFunc func(ctx context.Context, id int64) (db.Accounts, error)

	// GetAccountForUpdateFunc mocks the GetAccountForUpdate method.
	GetAccountForUpdateFunc func(ctx context.Context, id int64) (db.Accounts, error)

	// GetEntryFunc mocks the GetEntry method.
	GetEntryFunc func(ctx context.Context, id int64) (db.Entries, error)

	// GetTransferFunc mocks the GetTransfer method.
	GetTransferFunc func(ctx context.Context, id int64) (db.Transfers, error)

	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(ctx context.Context, username string) (db.Users, error)

	// ListAccountsFunc mocks the ListAccounts method.
	ListAccountsFunc func(ctx context.Context, arg db.ListAccountsParams) ([]db.Accounts, error)

	// ListEntriesFunc mocks the ListEntries method.
	ListEntriesFunc func(ctx context.Context, arg db.ListEntriesParams) ([]db.Entries, error)

	// ListTransfersFunc mocks the ListTransfers method.
	ListTransfersFunc func(ctx context.Context, arg db.ListTransfersParams) ([]db.Transfers, error)

	// TransferTxFunc mocks the TransferTx method.
	TransferTxFunc func(ctx context.Context, arg db.TransferTxParams) (db.TransferTxResult, error)

	// UpdateAccountFunc mocks the UpdateAccount method.
	UpdateAccountFunc func(ctx context.Context, arg db.UpdateAccountParams) (db.Accounts, error)

	// UpdateEntryFunc mocks the UpdateEntry method.
	UpdateEntryFunc func(ctx context.Context, arg db.UpdateEntryParams) (db.Entries, error)

	// UpdateTransferFunc mocks the UpdateTransfer method.
	UpdateTransferFunc func(ctx context.Context, arg db.UpdateTransferParams) (db.Transfers, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddAccountBalance holds details about calls to the AddAccountBalance method.
		AddAccountBalance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg db.AddAccountBalanceParams
		}
		// CreateAccount holds details about calls to the CreateAccount method.
		CreateAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg db.CreateAccountParams
		}
		// CreateEntry holds details about calls to the CreateEntry method.
		CreateEntry []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg db.CreateEntryParams
		}
		// CreateTransfer holds details about calls to the CreateTransfer method.
		CreateTransfer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg db.CreateTransferParams
		}
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg db.CreateUserParams
		}
		// DeleteAccount holds details about calls to the DeleteAccount method.
		DeleteAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// DeleteEntry holds details about calls to the DeleteEntry method.
		DeleteEntry []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// DeleteTransfer holds details about calls to the DeleteTransfer method.
		DeleteTransfer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetAccount holds details about calls to the GetAccount method.
		GetAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetAccountForUpdate holds details about calls to the GetAccountForUpdate method.
		GetAccountForUpdate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetEntry holds details about calls to the GetEntry method.
		GetEntry []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetTransfer holds details about calls to the GetTransfer method.
		GetTransfer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
		}
		// ListAccounts holds details about calls to the ListAccounts method.
		ListAccounts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg db.ListAccountsParams
		}
		// ListEntries holds details about calls to the ListEntries method.
		ListEntries []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg db.ListEntriesParams
		}
		// ListTransfers holds details about calls to the ListTransfers method.
		ListTransfers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg db.ListTransfersParams
		}
		// TransferTx holds details about calls to the TransferTx method.
		TransferTx []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg db.TransferTxParams
		}
		// UpdateAccount holds details about calls to the UpdateAccount method.
		UpdateAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg db.UpdateAccountParams
		}
		// UpdateEntry holds details about calls to the UpdateEntry method.
		UpdateEntry []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg db.UpdateEntryParams
		}
		// UpdateTransfer holds details about calls to the UpdateTransfer method.
		UpdateTransfer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg db.UpdateTransferParams
		}
	}
	lockAddAccountBalance   sync.RWMutex
	lockCreateAccount       sync.RWMutex
	lockCreateEntry         sync.RWMutex
	lockCreateTransfer      sync.RWMutex
	lockCreateUser          sync.RWMutex
	lockDeleteAccount       sync.RWMutex
	lockDeleteEntry         sync.RWMutex
	lockDeleteTransfer      sync.RWMutex
	lockGetAccount          sync.RWMutex
	lockGetAccountForUpdate sync.RWMutex
	lockGetEntry            sync.RWMutex
	lockGetTransfer         sync.RWMutex
	lockGetUser             sync.RWMutex
	lockListAccounts        sync.RWMutex
	lockListEntries         sync.RWMutex
	lockListTransfers       sync.RWMutex
	lockTransferTx          sync.RWMutex
	lockUpdateAccount       sync.RWMutex
	lockUpdateEntry         sync.RWMutex
	lockUpdateTransfer      sync.RWMutex
}

// AddAccountBalance calls AddAccountBalanceFunc.
func (mock *MockStore) AddAccountBalance(ctx context.Context, arg db.AddAccountBalanceParams) (db.Accounts, error) {
	if mock.AddAccountBalanceFunc == nil {
		panic("MockStore.AddAccountBalanceFunc: method is nil but Store.AddAccountBalance was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg db.AddAccountBalanceParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockAddAccountBalance.Lock()
	mock.calls.AddAccountBalance = append(mock.calls.AddAccountBalance, callInfo)
	mock.lockAddAccountBalance.Unlock()
	return mock.AddAccountBalanceFunc(ctx, arg)
}

// AddAccountBalanceCalls gets all the calls that were made to AddAccountBalance.
// Check the length with:
//
//	len(mockedStore.AddAccountBalanceCalls())
func (mock *MockStore) AddAccountBalanceCalls() []struct {
	Ctx context.Context
	Arg db.AddAccountBalanceParams
} {
	var calls []struct {
		Ctx context.Context
		Arg db.AddAccountBalanceParams
	}
	mock.lockAddAccountBalance.RLock()
	calls = mock.calls.AddAccountBalance
	mock.lockAddAccountBalance.RUnlock()
	return calls
}

// CreateAccount calls CreateAccountFunc.
func (mock *MockStore) CreateAccount(ctx context.Context, arg db.CreateAccountParams) (db.Accounts, error) {
	if mock.CreateAccountFunc == nil {
		panic("MockStore.CreateAccountFunc: method is nil but Store.CreateAccount was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg db.CreateAccountParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockCreateAccount.Lock()
	mock.calls.CreateAccount = append(mock.calls.CreateAccount, callInfo)
	mock.lockCreateAccount.Unlock()
	return mock.CreateAccountFunc(ctx, arg)
}

// CreateAccountCalls gets all the calls that were made to CreateAccount.
// Check the length with:
//
//	len(mockedStore.CreateAccountCalls())
func (mock *MockStore) CreateAccountCalls() []struct {
	Ctx context.Context
	Arg db.CreateAccountParams
} {
	var calls []struct {
		Ctx context.Context
		Arg db.CreateAccountParams
	}
	mock.lockCreateAccount.RLock()
	calls = mock.calls.CreateAccount
	mock.lockCreateAccount.RUnlock()
	return calls
}

// CreateEntry calls CreateEntryFunc.
func (mock *MockStore) CreateEntry(ctx context.Context, arg db.CreateEntryParams) (db.Entries, error) {
	if mock.CreateEntryFunc == nil {
		panic("MockStore.CreateEntryFunc: method is nil but Store.CreateEntry was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg db.CreateEntryParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockCreateEntry.Lock()
	mock.calls.CreateEntry = append(mock.calls.CreateEntry, callInfo)
	mock.lockCreateEntry.Unlock()
	return mock.CreateEntryFunc(ctx, arg)
}

// CreateEntryCalls gets all the calls that were made to CreateEntry.
// Check the length with:
//
//	len(mockedStore.CreateEntryCalls())
func (mock *MockStore) CreateEntryCalls() []struct {
	Ctx context.Context
	Arg db.CreateEntryParams
} {
	var calls []struct {
		Ctx context.Context
		Arg db.CreateEntryParams
	}
	mock.lockCreateEntry.RLock()
	calls = mock.calls.CreateEntry
	mock.lockCreateEntry.RUnlock()
	return calls
}

// CreateTransfer calls CreateTransferFunc.
func (mock *MockStore) CreateTransfer(ctx context.Context, arg db.CreateTransferParams) (db.Transfers, error) {
	if mock.CreateTransferFunc == nil {
		panic("MockStore.CreateTransferFunc: method is nil but Store.CreateTransfer was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg db.CreateTransferParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockCreateTransfer.Lock()
	mock.calls.CreateTransfer = append(mock.calls.CreateTransfer, callInfo)
	mock.lockCreateTransfer.Unlock()
	return mock.CreateTransferFunc(ctx, arg)
}

// CreateTransferCalls gets all the calls that were made to CreateTransfer.
// Check the length with:
//
//	len(mockedStore.CreateTransferCalls())
func (mock *MockStore) CreateTransferCalls() []struct {
	Ctx context.Context
	Arg db.CreateTransferParams
} {
	var calls []struct {
		Ctx context.Context
		Arg db.CreateTransferParams
	}
	mock.lockCreateTransfer.RLock()
	calls = mock.calls.CreateTransfer
	mock.lockCreateTransfer.RUnlock()
	return calls
}

// CreateUser calls CreateUserFunc.
func (mock *MockStore) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.Users, error) {
	if mock.CreateUserFunc == nil {
		panic("MockStore.CreateUserFunc: method is nil but Store.CreateUser was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg db.CreateUserParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(ctx, arg)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//
//	len(mockedStore.CreateUserCalls())
func (mock *MockStore) CreateUserCalls() []struct {
	Ctx context.Context
	Arg db.CreateUserParams
} {
	var calls []struct {
		Ctx context.Context
		Arg db.CreateUserParams
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// DeleteAccount calls DeleteAccountFunc.
func (mock *MockStore) DeleteAccount(ctx context.Context, id int64) (db.Accounts, error) {
	if mock.DeleteAccountFunc == nil {
		panic("MockStore.DeleteAccountFunc: method is nil but Store.DeleteAccount was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteAccount.Lock()
	mock.calls.DeleteAccount = append(mock.calls.DeleteAccount, callInfo)
	mock.lockDeleteAccount.Unlock()
	return mock.DeleteAccountFunc(ctx, id)
}

// DeleteAccountCalls gets all the calls that were made to DeleteAccount.
// Check the length with:
//
//	len(mockedStore.DeleteAccountCalls())
func (mock *MockStore) DeleteAccountCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockDeleteAccount.RLock()
	calls = mock.calls.DeleteAccount
	mock.lockDeleteAccount.RUnlock()
	return calls
}

// DeleteEntry calls DeleteEntryFunc.
func (mock *MockStore) DeleteEntry(ctx context.Context, id int64) (db.Entries, error) {
	if mock.DeleteEntryFunc == nil {
		panic("MockStore.DeleteEntryFunc: method is nil but Store.DeleteEntry was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteEntry.Lock()
	mock.calls.DeleteEntry = append(mock.calls.DeleteEntry, callInfo)
	mock.lockDeleteEntry.Unlock()
	return mock.DeleteEntryFunc(ctx, id)
}

// DeleteEntryCalls gets all the calls that were made to DeleteEntry.
// Check the length with:
//
//	len(mockedStore.DeleteEntryCalls())
func (mock *MockStore) DeleteEntryCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockDeleteEntry.RLock()
	calls = mock.calls.DeleteEntry
	mock.lockDeleteEntry.RUnlock()
	return calls
}

// DeleteTransfer calls DeleteTransferFunc.
func (mock *MockStore) DeleteTransfer(ctx context.Context, id int64) (db.Transfers, error) {
	if mock.DeleteTransferFunc == nil {
		panic("MockStore.DeleteTransferFunc: method is nil but Store.DeleteTransfer was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteTransfer.Lock()
	mock.calls.DeleteTransfer = append(mock.calls.DeleteTransfer, callInfo)
	mock.lockDeleteTransfer.Unlock()
	return mock.DeleteTransferFunc(ctx, id)
}

// DeleteTransferCalls gets all the calls that were made to DeleteTransfer.
// Check the length with:
//
//	len(mockedStore.DeleteTransferCalls())
func (mock *MockStore) DeleteTransferCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockDeleteTransfer.RLock()
	calls = mock.calls.DeleteTransfer
	mock.lockDeleteTransfer.RUnlock()
	return calls
}

// GetAccount calls GetAccountFunc.
func (mock *MockStore) GetAccount(ctx context.Context, id int64) (db.Accounts, error) {
	if mock.GetAccountFunc == nil {
		panic("MockStore.GetAccountFunc: method is nil but Store.GetAccount was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetAccount.Lock()
	mock.calls.GetAccount = append(mock.calls.GetAccount, callInfo)
	mock.lockGetAccount.Unlock()
	return mock.GetAccountFunc(ctx, id)
}

// GetAccountCalls gets all the calls that were made to GetAccount.
// Check the length with:
//
//	len(mockedStore.GetAccountCalls())
func (mock *MockStore) GetAccountCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetAccount.RLock()
	calls = mock.calls.GetAccount
	mock.lockGetAccount.RUnlock()
	return calls
}

// GetAccountForUpdate calls GetAccountForUpdateFunc.
func (mock *MockStore) GetAccountForUpdate(ctx context.Context, id int64) (db.Accounts, error) {
	if mock.GetAccountForUpdateFunc == nil {
		panic("MockStore.GetAccountForUpdateFunc: method is nil but Store.GetAccountForUpdate was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetAccountForUpdate.Lock()
	mock.calls.GetAccountForUpdate = append(mock.calls.GetAccountForUpdate, callInfo)
	mock.lockGetAccountForUpdate.Unlock()
	return mock.GetAccountForUpdateFunc(ctx, id)
}

// GetAccountForUpdateCalls gets all the calls that were made to GetAccountForUpdate.
// Check the length with:
//
//	len(mockedStore.GetAccountForUpdateCalls())
func (mock *MockStore) GetAccountForUpdateCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetAccountForUpdate.RLock()
	calls = mock.calls.GetAccountForUpdate
	mock.lockGetAccountForUpdate.RUnlock()
	return calls
}

// GetEntry calls GetEntryFunc.
func (mock *MockStore) GetEntry(ctx context.Context, id int64) (db.Entries, error) {
	if mock.GetEntryFunc == nil {
		panic("MockStore.GetEntryFunc: method is nil but Store.GetEntry was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetEntry.Lock()
	mock.calls.GetEntry = append(mock.calls.GetEntry, callInfo)
	mock.lockGetEntry.Unlock()
	return mock.GetEntryFunc(ctx, id)
}

// GetEntryCalls gets all the calls that were made to GetEntry.
// Check the length with:
//
//	len(mockedStore.GetEntryCalls())
func (mock *MockStore) GetEntryCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetEntry.RLock()
	calls = mock.calls.GetEntry
	mock.lockGetEntry.RUnlock()
	return calls
}

// GetTransfer calls GetTransferFunc.
func (mock *MockStore) GetTransfer(ctx context.Context, id int64) (db.Transfers, error) {
	if mock.GetTransferFunc == nil {
		panic("MockStore.GetTransferFunc: method is nil but Store.GetTransfer was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetTransfer.Lock()
	mock.calls.GetTransfer = append(mock.calls.GetTransfer, callInfo)
	mock.lockGetTransfer.Unlock()
	return mock.GetTransferFunc(ctx, id)
}

// GetTransferCalls gets all the calls that were made to GetTransfer.
// Check the length with:
//
//	len(mockedStore.GetTransferCalls())
func (mock *MockStore) GetTransferCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetTransfer.RLock()
	calls = mock.calls.GetTransfer
	mock.lockGetTransfer.RUnlock()
	return calls
}

// GetUser calls GetUserFunc.
func (mock *MockStore) GetUser(ctx context.Context, username string) (db.Users, error) {
	if mock.GetUserFunc == nil {
		panic("MockStore.GetUserFunc: method is nil but Store.GetUser was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
	}{
		Ctx:      ctx,
		Username: username,
	}
	mock.lockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	mock.lockGetUser.Unlock()
	return mock.GetUserFunc(ctx, username)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//
//	len(mockedStore.GetUserCalls())
func (mock *MockStore) GetUserCalls() []struct {
	Ctx      context.Context
	Username string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
	}
	mock.lockGetUser.RLock()
	calls = mock.calls.GetUser
	mock.lockGetUser.RUnlock()
	return calls
}

// ListAccounts calls ListAccountsFunc.
func (mock *MockStore) ListAccounts(ctx context.Context, arg db.ListAccountsParams) ([]db.Accounts, error) {
	if mock.ListAccountsFunc == nil {
		panic("MockStore.ListAccountsFunc: method is nil but Store.ListAccounts was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg db.ListAccountsParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockListAccounts.Lock()
	mock.calls.ListAccounts = append(mock.calls.ListAccounts, callInfo)
	mock.lockListAccounts.Unlock()
	return mock.ListAccountsFunc(ctx, arg)
}

// ListAccountsCalls gets all the calls that were made to ListAccounts.
// Check the length with:
//
//	len(mockedStore.ListAccountsCalls())
func (mock *MockStore) ListAccountsCalls() []struct {
	Ctx context.Context
	Arg db.ListAccountsParams
} {
	var calls []struct {
		Ctx context.Context
		Arg db.ListAccountsParams
	}
	mock.lockListAccounts.RLock()
	calls = mock.calls.ListAccounts
	mock.lockListAccounts.RUnlock()
	return calls
}

// ListEntries calls ListEntriesFunc.
func (mock *MockStore) ListEntries(ctx context.Context, arg db.ListEntriesParams) ([]db.Entries, error) {
	if mock.ListEntriesFunc == nil {
		panic("MockStore.ListEntriesFunc: method is nil but Store.ListEntries was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg db.ListEntriesParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockListEntries.Lock()
	mock.calls.ListEntries = append(mock.calls.ListEntries, callInfo)
	mock.lockListEntries.Unlock()
	return mock.ListEntriesFunc(ctx, arg)
}

// ListEntriesCalls gets all the calls that were made to ListEntries.
// Check the length with:
//
//	len(mockedStore.ListEntriesCalls())
func (mock *MockStore) ListEntriesCalls() []struct {
	Ctx context.Context
	Arg db.ListEntriesParams
} {
	var calls []struct {
		Ctx context.Context
		Arg db.ListEntriesParams
	}
	mock.lockListEntries.RLock()
	calls = mock.calls.ListEntries
	mock.lockListEntries.RUnlock()
	return calls
}

// ListTransfers calls ListTransfersFunc.
func (mock *MockStore) ListTransfers(ctx context.Context, arg db.ListTransfersParams) ([]db.Transfers, error) {
	if mock.ListTransfersFunc == nil {
		panic("MockStore.ListTransfersFunc: method is nil but Store.ListTransfers was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg db.ListTransfersParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockListTransfers.Lock()
	mock.calls.ListTransfers = append(mock.calls.ListTransfers, callInfo)
	mock.lockListTransfers.Unlock()
	return mock.ListTransfersFunc(ctx, arg)
}

// ListTransfersCalls gets all the calls that were made to ListTransfers.
// Check the length with:
//
//	len(mockedStore.ListTransfersCalls())
func (mock *MockStore) ListTransfersCalls() []struct {
	Ctx context.Context
	Arg db.ListTransfersParams
} {
	var calls []struct {
		Ctx context.Context
		Arg db.ListTransfersParams
	}
	mock.lockListTransfers.RLock()
	calls = mock.calls.ListTransfers
	mock.lockListTransfers.RUnlock()
	return calls
}

// TransferTx calls TransferTxFunc.
func (mock *MockStore) TransferTx(ctx context.Context, arg db.TransferTxParams) (db.TransferTxResult, error) {
	if mock.TransferTxFunc == nil {
		panic("MockStore.TransferTxFunc: method is nil but Store.TransferTx was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg db.TransferTxParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockTransferTx.Lock()
	mock.calls.TransferTx = append(mock.calls.TransferTx, callInfo)
	mock.lockTransferTx.Unlock()
	return mock.TransferTxFunc(ctx, arg)
}

// TransferTxCalls gets all the calls that were made to TransferTx.
// Check the length with:
//
//	len(mockedStore.TransferTxCalls())
func (mock *MockStore) TransferTxCalls() []struct {
	Ctx context.Context
	Arg db.TransferTxParams
} {
	var calls []struct {
		Ctx context.Context
		Arg db.TransferTxParams
	}
	mock.lockTransferTx.RLock()
	calls = mock.calls.TransferTx
	mock.lockTransferTx.RUnlock()
	return calls
}

// UpdateAccount calls UpdateAccountFunc.
func (mock *MockStore) UpdateAccount(ctx context.Context, arg db.UpdateAccountParams) (db.Accounts, error) {
	if mock.UpdateAccountFunc == nil {
		panic("MockStore.UpdateAccountFunc: method is nil but Store.UpdateAccount was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg db.UpdateAccountParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockUpdateAccount.Lock()
	mock.calls.UpdateAccount = append(mock.calls.UpdateAccount, callInfo)
	mock.lockUpdateAccount.Unlock()
	return mock.UpdateAccountFunc(ctx, arg)
}

// UpdateAccountCalls gets all the calls that were made to UpdateAccount.
// Check the length with:
//
//	len(mockedStore.UpdateAccountCalls())
func (mock *MockStore) UpdateAccountCalls() []struct {
	Ctx context.Context
	Arg db.UpdateAccountParams
} {
	var calls []struct {
		Ctx context.Context
		Arg db.UpdateAccountParams
	}
	mock.lockUpdateAccount.RLock()
	calls = mock.calls.UpdateAccount
	mock.lockUpdateAccount.RUnlock()
	return calls
}

// UpdateEntry calls UpdateEntryFunc.
func (mock *MockStore) UpdateEntry(ctx context.Context, arg db.UpdateEntryParams) (db.Entries, error) {
	if mock.UpdateEntryFunc == nil {
		panic("MockStore.UpdateEntryFunc: method is nil but Store.UpdateEntry was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg db.UpdateEntryParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockUpdateEntry.Lock()
	mock.calls.UpdateEntry = append(mock.calls.UpdateEntry, callInfo)
	mock.lockUpdateEntry.Unlock()
	return mock.UpdateEntryFunc(ctx, arg)
}

// UpdateEntryCalls gets all the calls that were made to UpdateEntry.
// Check the length with:
//
//	len(mockedStore.UpdateEntryCalls())
func (mock *MockStore) UpdateEntryCalls() []struct {
	Ctx context.Context
	Arg db.UpdateEntryParams
} {
	var calls []struct {
		Ctx context.Context
		Arg db.UpdateEntryParams
	}
	mock.lockUpdateEntry.RLock()
	calls = mock.calls.UpdateEntry
	mock.lockUpdateEntry.RUnlock()
	return calls
}

// UpdateTransfer calls UpdateTransferFunc.
func (mock *MockStore) UpdateTransfer(ctx context.Context, arg db.UpdateTransferParams) (db.Transfers, error) {
	if mock.UpdateTransferFunc == nil {
		panic("MockStore.UpdateTransferFunc: method is nil but Store.UpdateTransfer was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg db.UpdateTransferParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockUpdateTransfer.Lock()
	mock.calls.UpdateTransfer = append(mock.calls.UpdateTransfer, callInfo)
	mock.lockUpdateTransfer.Unlock()
	return mock.UpdateTransferFunc(ctx, arg)
}

// UpdateTransferCalls gets all the calls that were made to UpdateTransfer.
// Check the length with:
//
//	len(mockedStore.UpdateTransferCalls())
func (mock *MockStore) UpdateTransferCalls() []struct {
	Ctx context.Context
	Arg db.UpdateTransferParams
} {
	var calls []struct {
		Ctx context.Context
		Arg db.UpdateTransferParams
	}
	mock.lockUpdateTransfer.RLock()
	calls = mock.calls.UpdateTransfer
	mock.lockUpdateTransfer.RUnlock()
	return calls
}
